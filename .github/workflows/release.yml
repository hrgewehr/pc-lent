name: release
on:
  push:
    tags: ['v*']
jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with: { dotnet-version: '8.0.x' }

      - name: Publish apps
        shell: pwsh
        run: |
          dotnet publish PCMedic.Agent/PCMedic.Agent.csproj -c Release -r win-x64 -p:PublishSingleFile=true -p:PublishTrimmed=true --self-contained true
          dotnet publish PCMedic.UI/PCMedic.UI.csproj     -c Release -r win-x64 -p:PublishSingleFile=true -p:PublishTrimmed=true --self-contained true
          New-Item -ItemType Directory -Force -Path dist/PCMedic | Out-Null
          Copy-Item -Recurse PCMedic.Agent/bin/Release/net8.0/win-x64/publish dist/PCMedic/Agent
          Copy-Item -Recurse PCMedic.UI/bin/Release/net8.0/win-x64/publish     dist/PCMedic/UI
          Copy-Item -Recurse scripts dist/PCMedic/scripts
          if (-not (Test-Path dist/PCMedic/docs)) { New-Item -ItemType Directory dist/PCMedic/docs | Out-Null }
          Compress-Archive -Path dist/PCMedic/* -DestinationPath PCMedic-win64.zip -Force

      - name: Setup GitHub CLI
        uses: cli/gh-actions@v2

      - name: Upload to PUBLIC releases repo
        env:
          GH_TOKEN: ${{ secrets.RELEASES_PAT }}
          PUB_OWNER: hrgewehr
          PUB_REPO: pcm-releases
        shell: pwsh
        run: |
          $tag = "${{ github.ref_name }}"
          gh release create $tag -R "$env:PUB_OWNER/$env:PUB_REPO" -t $tag -n "PCMedic $tag" --generate-notes || echo "Release exists"
          gh release upload  $tag -R "$env:PUB_OWNER/$env:PUB_REPO" PCMedic-win64.zip --clobber
